#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        DG4.py
#
#  Project :     DG4 Dewpoint Generator
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      maxim.stassevich$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["DG4", "DG4Class", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(DG4.additionnal_import) ENABLED START -----#
import PyTango
import sys
import serial
import serial.tools.list_ports
import threading
import time


class read_DG4_Thread(threading.Thread):
    def __init__(self, port):
        threading.Thread.__init__(self)
        self.port = port
        self.running = True
        self.fault = False
        self.commandAllowed = False
        self.command = ""
                
        self.humidity1 = 0.00
        self.humidity2 = 0.00
        self.dewpoint1 = 0.00
        self.dewpoint2 = 0.00
        self.temperature = 0.00
        
        self.ser = serial.Serial(              
               port = self.port,
               baudrate = 9600,
               parity = serial.PARITY_NONE,
               stopbits = serial.STOPBITS_ONE,
               bytesize = serial.EIGHTBITS,
               timeout = 1
               )
        print "Starting thread"
    def run(self):
        while self.running:
            try:
                if self.commandAllowed:
                    self.ser.write(self.command)
                    reply = self.ser.readline()
                    self.commandAllowed = False
                    self.command = ""                    
                data = self.ser.readline()
                dataSplit = data.split(',')
                self.humidity1 = float(dataSplit[4])
                self.dewpoint1 = float(dataSplit[2])
                self.temperature = float(dataSplit[5])
                self.humidity2 = float(dataSplit[3])
                self.dewpoint2 = float(dataSplit[1])
                self.fault = False
            except:
                self.fault = True
                time.sleep(0.3)
        self.ser.close()
        print "Thread exited"
        
    def stop(self):
        self.running = False
        print "Exiting thread.."
        
    def get_data(self):
        return self.fault, self.humidity1, self.humidity2, self.dewpoint1, self.dewpoint2, self.temperature
    
    def send_command(self, command):
        self.command = command
        self.commandAllowed = True             

#----- PROTECTED REGION END -----#	//	DG4.additionnal_import

# Device States Description
# ON : DG4 is ON
# OFF : DG4 is OFF
# DISABLE : 


class DG4 (PyTango.Device_4Impl):
    """This class is able to control a DG4"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(DG4.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	DG4.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        DG4.init_device(self)
        #----- PROTECTED REGION ID(DG4.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(DG4.delete_device) ENABLED START -----#
        self.get_thread.stop()
        if self.get_state() != PyTango.DevState.OFF:
            self.set_state(PyTango.DevState.OFF)
            self.set_status("Device is in OFF state")
        #----- PROTECTED REGION END -----#	//	DG4.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_humidity_read = 0.0
        self.attr_dewpoint_read = 0.0
        self.attr_set_humidity_attribute_read = 0.0
        self.attr_set_dewpoint_attribute_read = 0.0
        self.attr_temperature_read = 0.0
        #----- PROTECTED REGION ID(DG4.init_device) ENABLED START -----#
        self.On()
        #----- PROTECTED REGION END -----#	//	DG4.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(DG4.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.always_executed_hook

    # -------------------------------------------------------------------------
    #    DG4 read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_humidity(self, attr):
        self.debug_stream("In read_humidity()")
        #----- PROTECTED REGION ID(DG4.humidity_read) ENABLED START -----#
        attr.set_value(self.attr_humidity_read)
        
        #----- PROTECTED REGION END -----#	//	DG4.humidity_read
        
    def is_humidity_allowed(self, attr):
        self.debug_stream("In is_humidity_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(DG4.is_humidity_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.is_humidity_allowed
        return state_ok
        
    def read_dewpoint(self, attr):
        self.debug_stream("In read_dewpoint()")
        #----- PROTECTED REGION ID(DG4.dewpoint_read) ENABLED START -----#
        attr.set_value(self.attr_dewpoint_read)
        
        #----- PROTECTED REGION END -----#	//	DG4.dewpoint_read
        
    def is_dewpoint_allowed(self, attr):
        self.debug_stream("In is_dewpoint_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(DG4.is_dewpoint_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.is_dewpoint_allowed
        return state_ok
        
    def read_set_humidity_attribute(self, attr):
        self.debug_stream("In read_set_humidity_attribute()")
        #----- PROTECTED REGION ID(DG4.set_humidity_attribute_read) ENABLED START -----#
        attr.set_value(self.attr_set_humidity_attribute_read)
        
        #----- PROTECTED REGION END -----#	//	DG4.set_humidity_attribute_read
        
    def write_set_humidity_attribute(self, attr):
        self.debug_stream("In write_set_humidity_attribute()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(DG4.set_humidity_attribute_write) ENABLED START -----#
        value = "%.2f"%data
        command = "dg1:h" + value + "\r" + "\n"
        self.get_thread.send_command(command)
        
        #----- PROTECTED REGION END -----#	//	DG4.set_humidity_attribute_write
        
    def is_set_humidity_attribute_allowed(self, attr):
        self.debug_stream("In is_set_humidity_attribute_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(DG4.is_set_humidity_attribute_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.is_set_humidity_attribute_allowed
        return state_ok
        
    def read_set_dewpoint_attribute(self, attr):
        self.debug_stream("In read_set_dewpoint_attribute()")
        #----- PROTECTED REGION ID(DG4.set_dewpoint_attribute_read) ENABLED START -----#
        attr.set_value(self.attr_set_dewpoint_attribute_read)
        
        #----- PROTECTED REGION END -----#	//	DG4.set_dewpoint_attribute_read
        
    def write_set_dewpoint_attribute(self, attr):
        self.debug_stream("In write_set_dewpoint_attribute()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(DG4.set_dewpoint_attribute_write) ENABLED START -----#
        value = "%.2f"%data
        command = "dg1:d" + value + "\r" + "\n"
        self.get_thread.send_command(command)
        
        #----- PROTECTED REGION END -----#	//	DG4.set_dewpoint_attribute_write
        
    def is_set_dewpoint_attribute_allowed(self, attr):
        self.debug_stream("In is_set_dewpoint_attribute_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(DG4.is_set_dewpoint_attribute_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.is_set_dewpoint_attribute_allowed
        return state_ok
        
    def read_temperature(self, attr):
        self.debug_stream("In read_temperature()")
        #----- PROTECTED REGION ID(DG4.temperature_read) ENABLED START -----#
        attr.set_value(self.attr_temperature_read)
        
        #----- PROTECTED REGION END -----#	//	DG4.temperature_read
        
    def is_temperature_allowed(self, attr):
        self.debug_stream("In is_temperature_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(DG4.is_temperature_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.is_temperature_allowed
        return state_ok
         
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(DG4.read_attr_hardware) ENABLED START -----#
        if self.get_state() != PyTango.DevState.OFF:
            fault, humidity1, humidity2, dewpoint1, dewpoint2, temperature = self.get_thread.get_data()
            if fault == True:
                #self.Off()
                if self.get_state() != PyTango.DevState.DISABLE:
                    self.set_state(PyTango.DevState.DISABLE)
                    self.set_status("Device is in Disable state")
            else:
                if self.get_state() != PyTango.DevState.ON:
                    self.set_state(PyTango.DevState.ON)
                    self.set_status("Device is in On state")
                self.attr_humidity_read = humidity1
                self.attr_dewpoint_read = dewpoint1
                self.attr_temperature_read = temperature
                self.attr_set_humidity_attribute_read = humidity2
                self.attr_set_dewpoint_attribute_read = dewpoint2
        #time.sleep(0.3)        
        #----- PROTECTED REGION END -----#	//	DG4.read_attr_hardware


    # -------------------------------------------------------------------------
    #    DG4 command methods
    # -------------------------------------------------------------------------
    
    def On(self):
        """ Start DG4
        """
        self.debug_stream("In On()")
        #----- PROTECTED REGION ID(DG4.On) ENABLED START -----#
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
            self.set_status("Device is in ON state")
        self.get_thread = read_DG4_Thread(self.port)
        self.get_thread.start()
        #----- PROTECTED REGION END -----#	//	DG4.On
        
    def is_On_allowed(self):
        self.debug_stream("In is_On_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.ON])
        #----- PROTECTED REGION ID(DG4.is_On_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.is_On_allowed
        return state_ok
        
    def Off(self):
        """ Stop DG4
        """
        self.debug_stream("In Off()")
        #----- PROTECTED REGION ID(DG4.Off) ENABLED START -----#
        self.get_thread.stop()
        if self.get_state() != PyTango.DevState.OFF:
            self.set_state(PyTango.DevState.OFF)
            self.set_status("Device is in OFF state")
        #----- PROTECTED REGION END -----#	//	DG4.Off
        
    def is_Off_allowed(self):
        self.debug_stream("In is_Off_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(DG4.is_Off_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.is_Off_allowed
        return state_ok
        
    def set_humidity(self, argin):
        """ Set humidity
        :param argin: Humidity
        :type argin: PyTango.DevDouble
        """
        self.debug_stream("In set_humidity()")
        #----- PROTECTED REGION ID(DG4.set_humidity) ENABLED START -----#
        
        value = "%.2f"%argin
        command = "dg1:h" + value + "\r" + "\n"
        self.get_thread.send_command(command)
        
        #----- PROTECTED REGION END -----#	//	DG4.set_humidity
        
    def is_set_humidity_allowed(self):
        self.debug_stream("In is_set_humidity_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(DG4.is_set_humidity_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.is_set_humidity_allowed
        return state_ok
        
    def set_dewpoint(self, argin):
        """ Set dewpoint
        :param argin: Dewpoint
        :type argin: PyTango.DevDouble
        """
        self.debug_stream("In set_dewpoint()")
        #----- PROTECTED REGION ID(DG4.set_dewpoint) ENABLED START -----#
        #value = argin
        #value = format(value, '.2f')
        #value = str(value)
        value = "%.2f"%argin
        command = "dg1:d" + value + "\r" + "\n"
        self.get_thread.send_command(command)
        
        #----- PROTECTED REGION END -----#	//	DG4.set_dewpoint
        
    def is_set_dewpoint_allowed(self):
        self.debug_stream("In is_set_dewpoint_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(DG4.is_set_dewpoint_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.is_set_dewpoint_allowed
        return state_ok
        

    #----- PROTECTED REGION ID(DG4.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	DG4.programmer_methods

class DG4Class(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(DG4.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	DG4.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'port':
            [PyTango.DevString, 
            "COM port",
            ["/dev/ttyUSB1"] ],
        }


    #    Command definitions
    cmd_list = {
        'On':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "Device status"]],
        'Off':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "Device status"]],
        'set_humidity':
            [[PyTango.DevDouble, "Humidity"],
            [PyTango.DevVoid, "none"]],
        'set_dewpoint':
            [[PyTango.DevDouble, "Dewpoint"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'humidity':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Humidity",
                'unit': "%",
            } ],
        'dewpoint':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Dewpoint",
                'unit': "�C",
            } ],
        'set_humidity_attribute':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "set_humidity",
                'unit': "%",
            } ],
        'set_dewpoint_attribute':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "set_dewpoint",
                'unit': "�C",
            } ],
        'temperature':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Temperature",
                'unit': "�C",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(DG4Class, DG4, 'DG4')
        #----- PROTECTED REGION ID(DG4.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DG4.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
